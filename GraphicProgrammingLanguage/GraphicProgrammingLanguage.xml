<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphicProgrammingLanguage</name>
    </assembly>
    <members>
        <member name="M:GraphicProgrammingLanguage.Canvas.saveButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the save button, which will allow the user to store commands in the text box to a text file
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.loadButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the load button, which will allow users to load a text file of commands into the text box
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.runButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the run button, providing the ability to exectue the commands and draw shapes on the canvas
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Canvas.components">
            <summary>
             Required designer variable.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.InitializeComponent">
            <summary>
             Required method for Designer support - do not modify
             the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.IGPLCommand">
            <summary>
            Represents the interface for a Graphic Programming Language (GPL) command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IGPLCommand.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IGPLCommand.Arguments">
            <summary>
            Gets the arguments provided for the command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IGPLCommand.IsValid">
            <summary>
            Checks whether the command is valid based on the provided arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GraphicProgrammingLanguage.Commands.IGPLCommand.Execute(System.Windows.Forms.PictureBox,DrawingPosition)" -->
        <member name="T:GraphicProgrammingLanguage.Commands.AbstractGPLCommand">
            <summary>
            Represents an abstract implementation of the IGPLCommand interface.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.Arguments">
            <summary>
            Gets or sets the arguments provided for the command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.AbstractGPLCommand"/> class.
            </summary>
            <param name="args">The arguments for the command.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.IsValid">
            <summary>
            Checks whether the command is valid based on the provided arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the command.
            </summary>
            <param name="pictureBox">The PictureBox where the command executes.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand">
            <summary>
            Represents an abstract implementation of a conditional GPL command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.TrueCommandList">
            <summary>
            Gets or sets the list of commands to execute if the condition is true.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.FalseCommandList">
            <summary>
            Gets or sets the list of commands to execute if the condition is false.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand"/> class.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.CanvasPen">
            <summary>
            Handles commands for the pen color for drawing on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.CanvasPen.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the CanvasPen command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.CanvasPen.Colour">
            <summary>
            Gets the color value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CanvasPen.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.CanvasPen"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CanvasPen.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the CanvasPen command, setting the pen color for drawing on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command is executed successfully; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Circle">
            <summary>
            Enables the ability to draw circles on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Circle.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Circle command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Circle.Radius">
            <summary>
            Gets the radius value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Circle.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Circle"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Circle.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Circle command, drawing circles on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Clear">
            <summary>
            Enables the functionality to clear the canvas of any drawings
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Clear.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Clear command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Clear.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Clear"/> class.
            </summary>
            <param name="commandInfo">The command information (unused for Clear).</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Clear.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Clear command, clearing the canvas of any drawings.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position (unused for Clear).</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Drawto">
            <summary>
            Enables the ability to draw lines from one place to another on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Drawto command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.XTarget">
            <summary>
            Gets the X-coordinate target from the command arguments.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.YTarget">
            <summary>
            Gets the Y-coordinate target from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Drawto.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Drawto"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Drawto.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Drawto command, drawing lines from one place to another on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Fill">
            <summary>
            Enables the ability to toggle filling when drawing shapes on the canvas.
            </summary>
            
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Fill.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Fill command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Fill.IsOn">
            <summary>
            Gets whether filling is turned on or off from the command arguments (1, 0, True, False).
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Fill.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Fill"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Fill.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Fill command, toggling the fill option when drawing shapes on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.IfCondition">
            <summary>
            Represents and enables a conditional command that executes different sets of commands based on a specified condition.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IfCondition.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the IfCondition command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IfCondition.Condition">
            <summary>
            Gets the condition expression from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.IfCondition"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.IsValid">
            <summary>
            Checks if the IfCondition command is valid by ensuring it has the expected number of arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the IfCondition command, evaluating the condition expression and executing the appropriate set of commands.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Moveto">
            <summary>
            Enables the ability to move to a different drawing position on the canvas
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Rectangle">
            <summary>
            Enables the ability to draw rectangles on the canvas
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Reset">
            <summary>
            Enables the ability to reset the drawing position
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Triangle">
            <summary>
            Enables the ability to draw triangles on the canvas
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.ApplicationConfiguration">
            <summary>
             Bootstrap the application configuration.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.ApplicationConfiguration.Initialize">
            <summary>
             Bootstrap the application as follows:
             <code>
             global::System.Windows.Forms.Application.EnableVisualStyles();
             global::System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);
             global::System.Windows.Forms.Application.SetHighDpiMode(HighDpiMode.SystemAware);
            </code>
            </summary>
        </member>
        <member name="T:DrawingPosition">
            <summary>
            Represents the position for drawing on the canvas
            </summary>
        </member>
        <member name="P:DrawingPosition.X">
            <summary>
            The X coordinate for the drawing position
            </summary>
        </member>
        <member name="P:DrawingPosition.Y">
            <summary>
            The Y coodrinate for the drawing position
            </summary>
        </member>
        <member name="P:DrawingPosition.PenColor">
            <summary>
            The color that will be used for drawing
            </summary>
        </member>
        <member name="P:DrawingPosition.FillOn">
            <summary>
            The toggle to indicate if the Fill option is enabled or not
            </summary>
        </member>
        <member name="M:DrawingPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DrawingPosition"/> class
            </summary>
            <param name="x">The X coordinate for the drawing position</param>
            <param name="y">The Y coordinate for the drawing position</param>
        </member>
    </members>
</doc>
