<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphicProgrammingLanguage</name>
    </assembly>
    <members>
        <member name="M:GraphicProgrammingLanguage.Canvas.saveButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the save button, which will allow the user to store commands in the text box to a text file
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.loadButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the load button, which will allow users to load a text file of commands into the text box
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.runButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the event of clicking the run button, providing the ability to exectue the commands and draw shapes on the canvas
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Canvas.components">
            <summary>
             Required designer variable.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Canvas.InitializeComponent">
            <summary>
             Required method for Designer support - do not modify
             the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.IGPLCommand">
            <summary>
            Represents the interface to be implemented by command classes.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IGPLCommand.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IGPLCommand.Arguments">
            <summary>
            Gets the arguments provided for the command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IGPLCommand.IsValid">
            <summary>
            Checks whether the command is valid based on the provided arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GraphicProgrammingLanguage.Commands.IGPLCommand.Execute(System.Windows.Forms.PictureBox,DrawingPosition)" -->
        <member name="T:GraphicProgrammingLanguage.Commands.AbstractGPLCommand">
            <summary>
            Represents an abstract implementation of the IGPLCommand interface.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.Arguments">
            <summary>
            Gets or sets the arguments provided for the command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.AbstractGPLCommand"/> class.
            </summary>
            <param name="args">The arguments for the command.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.IsValid">
            <summary>
            Checks whether the command is valid based on the provided arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLCommand.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the command.
            </summary>
            <param name="pictureBox">The PictureBox where the command executes.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand">
            <summary>
            Represents an abstract implementation of a conditional GPL command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.TrueCommandList">
            <summary>
            Gets or sets the list of commands to execute if the condition is true.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.FalseCommandList">
            <summary>
            Gets or sets the list of commands to execute if the condition is false.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.AbstractGPLConditionalCommand"/> class.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.AssignVariable">
            <summary>
            Represents the functionality to assign a value to a variable.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.AssignVariable.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the AssignVariable command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AssignVariable.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.AssignVariable"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AssignVariable.IsValid">
            <summary>
            Checks whether the AssignVariable command is valid.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.AssignVariable.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the AssignVariable command.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.CallMethod">
            <summary>
            Represents the functionality to call a defined method.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.CallMethod.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the CallMethod command - 1, to remove method name from args.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CallMethod.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.CallMethod"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CallMethod.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the CallMethod command, calling the defined method and its specified arguments.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CallMethod.ParseMethodArguments">
            <summary>
            Parses the method arguments provided in the command and prepares them for method execution.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.CanvasPen">
            <summary>
            Represents the functionality to change the canvas pen colour.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.CanvasPen.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the CanvasPen command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.CanvasPen.Colour">
            <summary>
            Gets the colour value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CanvasPen.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.CanvasPen"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.CanvasPen.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the CanvasPen command, setting the pen colour for drawing on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command is executed successfully; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Circle">
            <summary>
            Represents the functionality to draw a circle.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Circle.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Circle command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Circle.Radius">
            <summary>
            Gets the radius value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Circle.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Circle"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Circle.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Circle command, drawing circles on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Clear">
            <summary>
            Represents the functionality to clear the canvas of any drawings.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Clear.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Clear command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Clear.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Clear"/> class.
            </summary>
            <param name="commandInfo">The command information (unused for Clear).</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Clear.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Clear command, clearing the canvas of any drawings.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position (unused for Clear).</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.DefineMethod">
            <summary>
            Represents the functionality to define a method.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.DefineMethod.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the DefineMethod command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.DefineMethod.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.DefineMethod"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.DefineMethod.GetMethodNameFromDeclaration(System.String)">
            <summary>
            Gets the method name from the method declaration.
            </summary>
            <param name="methodDeclaration">The method declaration string.</param>
            <returns>The method name.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.DefineMethod.GetMethodParametersFromDeclaration(System.String)">
            <summary>
            Gets the method parameters from the method declaration.
            </summary>
            <param name="methodDeclaration">The method declaration string.</param>
            <returns>The list of method parameters.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.DefineMethod.IsValid">
            <summary>
            Checks if the DefineMethod command is valid.
            </summary>
            <returns>True if the DefineMethod command is valid; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Drawto">
            <summary>
            Represents the functionality to draw lines from one place to another on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Drawto command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.XTarget">
            <summary>
            Gets the X-coordinate target from the command arguments.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Drawto.YTarget">
            <summary>
            Gets the Y-coordinate target from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Drawto.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Drawto"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Drawto.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Drawto command, drawing lines from one place to another on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Fill">
            <summary>
            Represents the functionality to toggle filling when drawing shapes on the canvas.
            </summary>
            
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Fill.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Fill command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Fill.IsOn">
            <summary>
            Gets whether filling is turned on or off from the command arguments (1, 0, True, False).
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Fill.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Fill"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Fill.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Fill command, toggling the fill option when drawing shapes on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.IfCondition">
            <summary>
            Represents the functionality to write a conditional command that executes different sets of commands based on a specified condition.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IfCondition.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the IfCondition command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.IfCondition.Condition">
            <summary>
            Gets the condition expression from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.IfCondition"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.IsValid">
            <summary>
            Checks if the IfCondition command is valid by ensuring it has the expected number of arguments.
            </summary>
            <returns>True if the command is valid; otherwise, false.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.IfCondition.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the IfCondition command, evaluating the condition expression and executing the appropriate set of commands.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Loop">
            <summary>
            Represents and enables the functionality of a loop command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Loop.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Loop command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Loop.Condition">
            <summary>
            Gets the condition expression for the loop.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Loop.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Loop"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Loop.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Loop command, repeating the enclosed commands based on the specified condition.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the loop executes successfully; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Moveto">
            <summary>
            Represents the functionality to move to a different drawing position on the canvas
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Commands.Moveto.MarkerSize">
            <summary>
            Sets the marker size for giving some visual feedback as to where on the canvas you have moved to             .
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Moveto.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Moveto command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Moveto.XPos">
            <summary>
            Gets the X-coordinate value from the command arguments.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Moveto.YPos">
            <summary>
            Gets the Y-coordinate value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Moveto.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Moveto"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Moveto.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Moveto command, moving to a different drawing position on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.ReassignVariable">
            <summary>
            Represents the functionality to reassign a value to a variable.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.ReassignVariable.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the ReassignVariable command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.ReassignVariable.VariableName">
            <summary>
            Gets the name of the variable to be reassigned.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GraphicProgrammingLanguage.Commands.ReassignVariable.Expression" -->
        <member name="M:GraphicProgrammingLanguage.Commands.ReassignVariable.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.ReassignVariable"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.ReassignVariable.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the ReassignVariable command, reassigning a value to a variable.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Rectangle">
            <summary>
            Represents the functionality to draw rectangles on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Rectangle.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Rectangle command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Rectangle.Width">
            <summary>
            Gets the width value from the command arguments.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Rectangle.Height">
            <summary>
            Gets the height value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Rectangle.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Rectangle"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Rectangle.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Rectangle command, drawing rectangles on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Reset">
            <summary>
            Represents the functionality to reset the drawing position
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Reset.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Reset command.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Reset.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Reset"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Reset.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Reset command, resetting the drawing position to (0, 0).
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Commands.Triangle">
            <summary>
            Represents the functionality to draw triangles on the canvas
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Triangle.ExpectedArgumentsCount">
            <summary>
            Gets the expected number of arguments for the Triangle command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Commands.Triangle.SideLength">
            <summary>
            Gets the side length value from the command arguments.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Triangle.#ctor(GraphicProgrammingLanguage.Model.CommandInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphicProgrammingLanguage.Commands.Triangle"/> class.
            </summary>
            <param name="commandInfo">The command information containing arguments.</param>
        </member>
        <member name="M:GraphicProgrammingLanguage.Commands.Triangle.Execute(System.Windows.Forms.PictureBox,DrawingPosition)">
            <summary>
            Executes the Triangle command, drawing triangles on the canvas.
            </summary>
            <param name="pictureBox">The PictureBox where drawing takes place.</param>
            <param name="drawingPosition">The current drawing position.</param>
            <returns>True if the command execution is successful; otherwise, false.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Factory.CommandFactory">
            <summary>
            Factory class responsible for creating instances of commands based on provided command information.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Factory.CommandFactory.CreateCommandList(GraphicProgrammingLanguage.Model.CommandInfo[])">
            <summary>
            Creates a list of commands based on an array of command information.
            </summary>
            <param name="commandInfos">Array of command information.</param>
            <returns>An array of instantiated GPL commands.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Factory.CommandFactory.TryInstantiateCommand(GraphicProgrammingLanguage.Model.CommandInfo,GraphicProgrammingLanguage.Commands.IGPLCommand@)">
            <summary>
            Attempts to instantiate commands.
            </summary>
            <param name="commandInfos">Array of command information.</param>
            <returns>An array of instantiated GPL commands.</returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.Model.CommandInfo">
            <summary>
            Represents information about a given command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Model.CommandInfo.Command">
            <summary>
            Gets or sets the command keyword.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GraphicProgrammingLanguage.Model.CommandInfo.Arguments" -->
        <member name="P:GraphicProgrammingLanguage.Model.CommandInfo.TrueConditionCommandInfos">
            <summary>
            Gets or sets the list of command information for the true condition of a conditional command.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Model.CommandInfo.FalseConditionCommandInfos">
            <summary>
            Gets or sets the list of command information for the false condition of a conditional command.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Model.Constants">
            <summary>
            Contains constant values used throughout GraphicProgrammingLanguage.
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Model.Constants.NewLine">
            <summary>
            Represents the newline character sequence.
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Model.Constants.ArgumentSplitFlags">
            <summary>
            Represents the split options used when splitting arguments (to keep it tidy).
            </summary>
        </member>
        <member name="F:GraphicProgrammingLanguage.Model.Constants.ReservedNames">
            <summary>
            Represents an array of reserved operators that are used throughout.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Model.GlobalDataList">
            <summary>
            Represents a global data list for the solution, storing variables and methods.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Model.GlobalDataList.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:GraphicProgrammingLanguage.Model.GlobalDataList"/>. Enforces only once Global Data List
            instance is active at any given time
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Model.GlobalDataList.Variables">
            <summary>
            Gets the collection of variables stored in the GlobalDataList.
            </summary>
        </member>
        <member name="P:GraphicProgrammingLanguage.Model.GlobalDataList.Methods">
            <summary>
            Gets the collection of defined methods stored in the GlobalDataList.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Model.GlobalDataList.#cctor">
            <summary>
            Static constructor to initialize the singleton instance.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Model.GlobalDataList.#ctor">
            <summary>
            Private constructor to enforce the singleton pattern.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Parser">
            <summary>
            Enables the parsing functionality via multiple methods.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Parser.Parse(System.String)">
            <summary>
            Parses the input string to extract command information and figure out what to do with it.
            </summary>
            <param name="input">The input string containing commands.</param>
            <returns>An array of CommandInfo representing parsed commands.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Parser.ParseLine(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Parses a single line of code and extracts command information.
            </summary>
            <param name="lines">The list of lines in the input string.</param>
            <returns>A CommandInfo representing the parsed command.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Parser.ParseConditionalBlock(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Parses a conditional block of code and extracts command information.
            </summary>
            <param name="lines">The list of lines in the input string.</param>
            <returns>A CommandInfo representing the parsed command of the conditional block.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Parser.TryParseComputedExpression(System.String,System.Int32@)">
            <summary>
            Tries to parse a computed expression and any of their operations.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="result">The parsed result if successful, or a -1.</param>
            <returns>True if parsing is successful. Anything else and it is false..</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Parser.FindReplaceVariableNames(System.String)">
            <summary>
            Finds and replaces variable names in the given expression with their corresponding values.
            </summary>
            <param name="valueTokens">The expression containing variable names.</param>
            <returns>The expression with variable names replaced by their values.</returns>
        </member>
        <member name="M:GraphicProgrammingLanguage.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
        <member name="T:GraphicProgrammingLanguage.Utility.DescendingKeyLengthComparer">
            <summary>
            Compares strings and sorts them in descending order based on their length.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.Utility.DescendingKeyLengthComparer.Compare(System.String,System.String)">
            <summary>
            Compares two strings in descending order based on their length.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>
            A negative value if x is greater, a positive value if y is greater,
            and zero if the lengths are equal (compares lexicographically in descending order in case of equal lengths).
            </returns>
        </member>
        <member name="T:GraphicProgrammingLanguage.ApplicationConfiguration">
            <summary>
             Bootstrap the application configuration.
            </summary>
        </member>
        <member name="M:GraphicProgrammingLanguage.ApplicationConfiguration.Initialize">
            <summary>
             Bootstrap the application as follows:
             <code>
             global::System.Windows.Forms.Application.EnableVisualStyles();
             global::System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);
             global::System.Windows.Forms.Application.SetHighDpiMode(HighDpiMode.SystemAware);
            </code>
            </summary>
        </member>
        <member name="T:DrawingPosition">
            <summary>
            Represents the position for drawing on the canvas
            </summary>
        </member>
        <member name="P:DrawingPosition.X">
            <summary>
            The X coordinate for the drawing position
            </summary>
        </member>
        <member name="P:DrawingPosition.Y">
            <summary>
            The Y coodrinate for the drawing position
            </summary>
        </member>
        <member name="P:DrawingPosition.PenColor">
            <summary>
            The color that will be used for drawing
            </summary>
        </member>
        <member name="P:DrawingPosition.FillOn">
            <summary>
            The toggle to indicate if the Fill option is enabled or not
            </summary>
        </member>
        <member name="M:DrawingPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DrawingPosition"/> class
            </summary>
            <param name="x">The X coordinate for the drawing position</param>
            <param name="y">The Y coordinate for the drawing position</param>
        </member>
    </members>
</doc>
